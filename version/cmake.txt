
cmake_minimum_required(VERSION 3.10)
project(ros2-gl-viewer)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()



# Find required packages
find_package(OpenGL REQUIRED)
find_package(glfw3 REQUIRED)
find_package(glm REQUIRED)
find_package(Eigen3 REQUIRED)
find_package(PCL REQUIRED)
find_package(Freetype REQUIRED)

# ROS2 dependencies - without using ament
find_package(rclcpp REQUIRED)
find_package(pcl_conversions REQUIRED)
find_package(std_msgs REQUIRED)
find_package(tf2 REQUIRED)
find_package(tf2_ros REQUIRED)
find_package(tf2_geometry_msgs REQUIRED)


# Find gl3w
set(GL3W_DIR ${CMAKE_CURRENT_SOURCE_DIR}/third_party/gl3w)
include_directories(${GL3W_DIR}/include)

# Set ImGui directory
set(IMGUI_DIR ${CMAKE_CURRENT_SOURCE_DIR}/third_party/imgui)
include_directories(${IMGUI_DIR})
set(IMGUI_IMPL_DIR ${IMGUI_DIR}/backends)
include_directories(${IMGUI_IMPL_DIR})

#set PointCloudRendering directory
set(POINTCLOUD_RENDERING_DIR ${CMAKE_CURRENT_SOURCE_DIR}/third_party/PointCloudRendering/PointCloudRendering)

# set FastNoise2 directory
set(FASTNOISE2_DIR ${CMAKE_CURRENT_SOURCE_DIR}/third_party/FastNoise2)


include_directories(

  ${POINTCLOUD_RENDERING_DIR}/Source

  ${POINTCLOUD_RENDERING_DIR}/Source/Geometry
  ${POINTCLOUD_RENDERING_DIR}/Source/Geometry/2D
  ${POINTCLOUD_RENDERING_DIR}/Source/Geometry/3D
  ${POINTCLOUD_RENDERING_DIR}/Source/Geometry/Animation
  ${POINTCLOUD_RENDERING_DIR}/Source/Geometry/General

  ${POINTCLOUD_RENDERING_DIR}/Source/Graphics
  ${POINTCLOUD_RENDERING_DIR}/Source/Interface
  ${POINTCLOUD_RENDERING_DIR}/Source/Utilities
  ${POINTCLOUD_RENDERING_DIR}/Source/PrecompiledHeaders


  ${POINTCLOUD_RENDERING_DIR}/Libraries
  ${POINTCLOUD_RENDERING_DIR}/Libraries/lodepng
  # ${POINTCLOUD_RENDERING_DIR}/Libraries/imgui
  # ${POINTCLOUD_RENDERING_DIR}/Libraries/imgui/examples
  ${POINTCLOUD_RENDERING_DIR}/Libraries/imfiledialog
  ${POINTCLOUD_RENDERING_DIR}/Libraries/imnodes
  # ${POINTCLOUD_RENDERING_DIR}/Libraries/implot
  ${POINTCLOUD_RENDERING_DIR}/Libraries/tinyply
  ${POINTCLOUD_RENDERING_DIR}/Libraries/objloader
  ${POINTCLOUD_RENDERING_DIR}/Libraries/spline

  ${FASTNOISE2_DIR}/include
  ${FASTNOISE2_DIR}/src

)

# Include directories
include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}/include
    ${CMAKE_CURRENT_SOURCE_DIR}/src
    ${EIGEN3_INCLUDE_DIR}
    ${PCL_INCLUDE_DIRS}
    ${rclcpp_INCLUDE_DIRS}
    ${pcl_conversions_INCLUDE_DIRS}
    ${std_msgs_LIBRARIES}
    ${tf2_INCLUDE_DIRS}
    ${tf2_ros_INCLUDE_DIRS}
    ${tf2_geometry_msgs_INCLUDE_DIRS}
    ${FREETYPE_INCLUDE_DIRS}
)

set(GLK_SOURCES
  src/glk/colormap.cpp
  src/glk/frame_buffer.cpp
  src/glk/glsl_shader.cpp
  src/glk/lines.cpp
  src/glk/mesh.cpp
  src/glk/pointcloud_buffer.cpp
  src/glk/loaders/ply_loader.cpp
  src/glk/primitives/primitives.cpp
)

# List all source files in guik directory
set(GUIK_SOURCES
  src/guik/camera_control.cpp
  src/guik/gl_canvas.cpp
  src/guik/imgui_application.cpp
  src/guik/model_control.cpp
  src/guik/projection_control.cpp
)

file(GLOB_RECURSE POINTCLOUD_RENDERING_SOURCES
  "${POINTCLOUD_RENDERING_DIR}/Source/*.cpp"
)

add_executable(pointcloud_viewer
  src/main.cpp
  ${GLK_SOURCES}
  ${GUIK_SOURCES}
  ${GL3W_DIR}/src/gl3w.c
  ${IMGUI_DIR}/imgui.cpp
  ${IMGUI_DIR}/imgui_demo.cpp
  ${IMGUI_DIR}/imgui_draw.cpp
  ${IMGUI_DIR}/imgui_tables.cpp
  ${IMGUI_DIR}/imgui_widgets.cpp
  ${IMGUI_DIR}/backends/imgui_impl_glfw.cpp
  ${IMGUI_DIR}/backends/imgui_impl_opengl3.cpp
  ${POINTCLOUD_RENDERING_SOURCES}
)

# Link libraries
target_link_libraries(pointcloud_viewer
  ${OPENGL_LIBRARIES}
  glfw
  ${PCL_LIBRARIES}
  ${rclcpp_LIBRARIES}
  ${pcl_conversions_LIBRARIES}
  ${std_msgs_LIBRARIES}
  ${tf2_LIBRARIES}
  ${tf2_ros_LIBRARIES}
  ${tf2_geometry_msgs_LIBRARIES}
  dl  # For gl3w dynamic loading
  ${FREETYPE_LIBRARIES}
)

# Make sure the application finds the shader files
add_custom_command(TARGET pointcloud_viewer POST_BUILD
  COMMAND ${CMAKE_COMMAND} -E copy_directory
  ${CMAKE_SOURCE_DIR}/data
  ${CMAKE_BINARY_DIR}/data
)

# Install the executable
install(TARGETS pointcloud_viewer
  RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}/bin
)